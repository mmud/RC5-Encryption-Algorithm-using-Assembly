
AVRASM ver. 2.2.8  c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm Mon Apr 21 14:33:22 2025

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(4): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(34): warning: .def: 'AH' redefinition (r17->r17)
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(446): macro 'INPUT' called here
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(34): warning: Register r17 already defined by the .DEF directive
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(446): macro 'INPUT' called here
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(36): warning: .def: 'AL' redefinition (r16->r16)
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(446): macro 'INPUT' called here
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(36): warning: Register r16 already defined by the .DEF directive
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(446): macro 'INPUT' called here
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(38): warning: .def: 'BH' redefinition (r19->r19)
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(446): macro 'INPUT' called here
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(38): warning: Register r19 already defined by the .DEF directive
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(446): macro 'INPUT' called here
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(40): warning: .def: 'BL' redefinition (r18->r18)
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(446): macro 'INPUT' called here
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(40): warning: Register r18 already defined by the .DEF directive
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(446): macro 'INPUT' called here
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
c:\users\lenovo\Documents\Atmel Studio\7.0\RC5 Encryption\RC5 Encryption\main.asm(4): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.7.374\avrasm\inc\m328Pdef.inc'
                                 
                                 ;Mahmoud Shaban Amer (ndpro)
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ;RC5 Encryption Project
                                 
                                 .include "m328Pdef.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; Define Variables:
                                 .EQU PL = 0xe1 
                                 .EQU PH = 0xb7
                                 .EQU QL = 0x37
                                 .EQU QH = 0x9e
                                 .EQU R = 8    
                                 .EQU T = 18   
                                 .EQU W = 16   
                                 .EQU U = 2    
                                 .EQU B = 12   
                                 .EQU C = 6    
                                 .EQU N = 54   
                                 ; Memory locations for K[i]
                                 .EQU BY0 = 0x0200
                                 .EQU BY1 = 0x0201
                                 .EQU BY2 = 0x0202
                                 .EQU BY3 = 0x0203
                                 .EQU BY4 = 0x0204
                                 .EQU BY5 = 0x0205
                                 .EQU BY6 = 0x0206
                                 .EQU BY7 = 0x0207
                                 .EQU BY8 = 0x0208
                                 .EQU BY9 = 0x0209
                                 .EQU BY10 = 0x020A
                                 .EQU BY11 = 0x020B
                                 
                                 ; MACROs
                                 .MACRO INPUT
                                     .DEF AH = R17
                                     ldi AH, high(@0)   
                                     .DEF AL = R16
                                     ldi AL, low(@0)    
                                     .DEF BH = R19
                                     ldi BH, high(@1)   
                                     .DEF BL = R18
                                     ldi BL, low(@1)    
                                 .ENDMACRO
                                 .MACRO SECRET_KEY
                                         LDI R20, @11
                                         STS BY0, R20
                                         LDI R20, @10
                                         STS BY1, R20
                                         LDI R20, @9
                                         STS BY2, R20
                                         LDI R20, @8
                                         STS BY3, R20
                                         LDI R20, @7
                                         STS BY4, R20
                                         LDI R20, @6
                                         STS BY5, R20
                                         LDI R20, @5
                                         STS BY6, R20
                                         LDI R20, @4
                                         STS BY7, R20
                                         LDI R20, @3
                                         STS BY8, R20
                                         LDI R20, @2
                                         STS BY9, R20
                                         LDI R20, @1
                                         STS BY10, R20
                                         LDI R20, @0
                                         STS BY11, R20
                                 .ENDMACRO
                                 .MACRO ROTL_WORD
                                         TST @2
                                         BREQ ZEROL
                                         MOV R25, @2         
                                     ROTL:
                                         ROL @1
                                         BST @0, 7
                                         ROL @0
                                         BLD @1, 0
                                         DEC R25
                                         BRNE ROTL
                                     ZEROL:
                                         nop
                                 .ENDMACRO
                                 .MACRO ROTR_WORD
                                         TST @2
                                         BREQ ZEROR
                                         MOV R25, @2          
                                     ROTR:
                                         ROR @0
                                         BST @1, 0
                                         ROR @1
                                         BLD @0, 7
                                         DEC R25
                                         BRNE ROTR
                                     ZEROR:
                                         nop
                                 .ENDMACRO
                                 .MACRO XOR_WORD            
                                         EOR @1, @3
                                         EOR @0, @2
                                 .ENDMACRO
                                 .MACRO SUB_WORD             
                                         SUB @1, @3
                                         SBC @0, @2
                                 .ENDMACRO
                                 .MACRO ADD_WORD            
                                         ADD @1, @3
                                         ADC @0, @2
                                 .ENDMACRO
                                 
                                 ;==============================================================================
                                 ;*RC5_SETUP**********************************
                                 ;==============================================================================
                                 
                                 .MACRO RC5_SETUP
                                 
                                 		;----------------------------------------------------------------
                                         ; ----- Convert secret key (K[i]) to 6 words (L[i]) -------------
                                 		;----------------------------------------------------------------
                                 
                                        
                                         ; Build L5:
                                         lds  r0, BY11
                                         lds  r1, BY10
                                         sts  0x022A, r1     
                                         sts  0x022B, r0 
                                         ; Build L4:
                                         lds  r0, BY9
                                         lds  r1, BY8
                                         sts  0x0228, r1
                                         sts  0x0229, r0
                                         ; Build L3:
                                         lds  r0, BY7
                                         lds  r1, BY6
                                         sts  0x0226, r1
                                         sts  0x0227, r0
                                         ; Build L2:
                                         lds  r0, BY5
                                         lds  r1, BY4
                                         sts  0x0224, r1
                                         sts  0x0225, r0
                                         ; Build L1:
                                         lds  r0, BY3
                                         lds  r1, BY2
                                         sts  0x0222, r1
                                         sts  0x0223, r0
                                         ; Build L0:
                                         lds  r0, BY1
                                         lds  r1, BY0
                                         sts  0x0220, r1
                                         sts  0x0221, r0
                                 		;----------------------------------------------------
                                         ; ----- Step 2: Initialize expanded key table S[i] -----
                                 		;----------------------------------------------------
                                         .EQU S0L = 0x0210
                                         .EQU S0H = 0x0211
                                         .EQU S1L = 0x0212
                                         .EQU S1H = 0x0213
                                 
                                         ldi ZL, low(S0L)
                                         ldi ZH, high(S0L)
                                 
                                         ldi R21, PL
                                         ldi R22, PH
                                         STS S0L, R21
                                         STS S0H, R22
                                 
                                         ldi R21, QL
                                         ldi R22, QH
                                         ldi R20, T
                                         subi R20, 1
                                     LOOP_S:
                                         LD R23, Z+          ; get low byte from current S[i]
                                         LD R24, Z+          ; get high byte from current S[i]
                                         ADD_WORD R24, R23, R22, R21   ; S[i] + Qw
                                         ST Z, R23           ; store result low byte
                                         STD Z+1, R24        ; store result high byte
                                         DEC R20
                                         BRNE LOOP_S
                                 		;------------------------------------------------------
                                         ; ----- Step 3: Key Expansion (mixing in L array) -----
                                 		;------------------------------------------------------
                                         clr R0
                                         clr R1
                                         clr R2
                                         clr R3
                                         ldi ZL, low(S0L)
                                         ldi ZH, high(S0L)
                                         ldi YL, low(0x0220)   
                                         ldi YH, high(0x0220)
                                         ldi R20, N
                                     LOOP_MIX:
                                         ADD_WORD R1, R0, R3, R2
                                         LD R23, Z
                                         LDD R24, Z+1
                                         ADD_WORD R1, R0, R24, R23
                                         ldi R22, 3
                                         ROTL_WORD R1, R0, R22
                                         ST Z, R0
                                         STD Z+1, R1
                                         ADD_WORD R3, R2, R1, R0
                                         mov R22, R2
                                         andi R22, 0x0F
                                         LD R23, Y
                                         LDD R24, Y+1
                                         ADD_WORD R3, R2, R24, R23
                                         ROTL_WORD R3, R2, R22
                                         ST Y, R2
                                         STD Y+1, R3
                                         RCALL I_RESET
                                         RCALL J_RESET
                                         DEC R20
                                         BRNE LOOP_MIX
                                 .ENDMACRO
                                 
                                 ;==============================================================================
                                 ;RC5_ENCRYPT*********************************
                                 ;==============================================================================
                                 
                                 .MACRO RC5_ENCRYPT
                                         LDI XL, 0x14
                                         LDI XH, 0x02
                                         LDS R22, S0L
                                         LDS R21, S0H
                                         ADD_WORD AH, AL, R21, R22
                                         LDS R22, S1L
                                         LDS R21, S1H
                                         ADD_WORD BH, BL, R21, R22
                                         LDI R20, R
                                     LOOP_E:
                                         LDI R22, 0x0F
                                         AND R22, BL  ;%16
                                         LD R23, X+
                                         LD R24, X+
                                         XOR_WORD AH, AL, BH, BL
                                         ROTL_WORD AH, AL, R22
                                         ADD_WORD AH, AL, R24, R23
                                         LDI R22, 0x0F
                                         AND R22, AL  ;%16
                                         LD R23, X+
                                         LD R24, X+
                                         XOR_WORD BH, BL, AH, AL
                                         ROTL_WORD BH, BL, R22
                                         ADD_WORD BH, BL, R24, R23
                                         DEC R20
                                         BRNE LOOP_E
                                 .ENDMACRO
                                 
                                 ;==============================================================================
                                 ;*RC5_DECRYPT**********************************
                                 ;==============================================================================
                                 
                                 .MACRO RC5_DECRYPT
                                         LDI XL, 0x34
                                         LDI XH, 0x02
                                         LDI R20, 8
                                     LOOP_D:
                                         LDI R22, 0x0F
                                         AND R22, AL
                                         LD R23, -X
                                         LD R24, -X
                                         SUB_WORD BH, BL, R23, R24
                                         ROTR_WORD BH, BL, R22
                                         XOR_WORD BH, BL, AH, AL
                                         LDI R22, 0x0F
                                         AND R22, BL
                                         LD R23, -X
                                         LD R24, -X
                                         SUB_WORD AH, AL, R23, R24
                                         ROTR_WORD AH, AL, R22
                                         XOR_WORD AH, AL, BH, BL
                                         DEC R20
                                         BRNE LOOP_D
                                         LDS R22, S0H
                                         LDS R21, S0L
                                         SUB_WORD AH, AL, R22, R21
                                         LDS R22, S1H
                                         LDS R21, S1L
                                         SUB_WORD BH, BL, R22, R21
                                 .ENDMACRO
                                 
                                 
                                 
                                 ;==============================================================================
                                 ;*LCD_Writer***********************************
                                 ;==============================================================================
                                 
                                 
                                 
                                 .MACRO LCD
                                 
                                 ;================================================================
                                 LCD_write_2:
                                       LDI   R25, 0xFF
                                       OUT   DDRD, R25         ;set port D o/p for data
                                       OUT   DDRB, R25         ;set port B o/p for command
                                       CBI   PORTB, 0          ;EN = 0
                                       RCALL delay_ms_2        ;wait for LCD power on
                                       ;-----------------------------------------------------
                                       RCALL LCD_init_2        ;subroutine to initialize LCD
                                       ;-----------------------------------------------------
                                       RCALL disp_message_2    ;subroutine to display message (only once)
                                       
                                       ; End of program - infinite loop to stop execution
                                 end_2:  RJMP  end_dis
                                 ;================================================================
                                 LCD_init_2:
                                       LDI   R25, 0x33         ;init LCD for 4-bit data
                                       RCALL command_wrt_2       
                                       RCALL delay_ms_2
                                       LDI   R25, 0x32         
                                       RCALL command_wrt_2
                                       RCALL delay_ms_2
                                       LDI   R25, 0x28         ;LCD 2 lines, 5x7 matrix
                                       RCALL command_wrt_2
                                       RCALL delay_ms_2
                                       LDI   R25, 0x0C         ;disp ON, cursor OFF
                                       RCALL command_wrt_2
                                       LDI   R25, 0x01         ;clear LCD
                                       RCALL command_wrt_2
                                       RCALL delay_ms_2
                                       LDI   R25, 0x06         ;shift cursor right
                                       RCALL command_wrt_2
                                       RET  
                                 ;================================================================
                                 command_wrt_2:
                                       MOV   R30, R25          ;use R30 instead of R27
                                       ANDI  R30, 0xF0         ;mask low nibble & keep high nibble
                                       OUT   PORTD, R30        ;o/p high nibble to port D
                                       CBI   PORTB, 1          ;RS = 0 for command
                                       SBI   PORTB, 0          ;EN = 1
                                       RCALL delay_short_2       
                                       CBI   PORTB, 0          ;EN = 0
                                       RCALL delay_us_2          
                                       ;----------------------------------------------------
                                       MOV   R30, R25          
                                       SWAP  R30               ;swap nibbles
                                       ANDI  R30, 0xF0         
                                       OUT   PORTD, R30        
                                       SBI   PORTB, 0          
                                       RCALL delay_short_2       
                                       CBI   PORTB, 0          
                                       RCALL delay_us_2          
                                       RET
                                 ;================================================================
                                 data_wrt_2:
                                       MOV   R30, R25          ;use R30 instead of R27
                                       ANDI  R30, 0xF0         
                                       OUT   PORTD, R30        
                                       SBI   PORTB, 1          ;RS = 1 for data
                                       SBI   PORTB, 0          ;EN = 1
                                       RCALL delay_short_2       
                                       CBI   PORTB, 0          
                                       RCALL delay_us_2          
                                       ;----------------------------------------------------
                                       MOV   R30, R25          
                                       SWAP  R30               
                                       ANDI  R30, 0xF0         
                                       OUT   PORTD, R30        
                                       SBI   PORTB, 0          
                                       RCALL delay_short_2       
                                       CBI   PORTB, 0          
                                       RCALL delay_us_2          
                                       RET
                                 ;================================================================
                                 disp_message_2:
                                       MOV   R25, R17          ;display characters via R25
                                       RCALL data_wrt_2          
                                       RCALL delay_seconds_2	  
                                 	  MOV   R25, R16          ;display characters via R25
                                       RCALL data_wrt_2          
                                       RCALL delay_seconds_2  
                                 	  MOV   R25, R19          ;display characters via R25
                                       RCALL data_wrt_2          
                                       RCALL delay_seconds_2
                                 	  MOV   R25, R18          ;display characters via R25
                                       RCALL data_wrt_2          
                                       RCALL delay_seconds_2     
                                       ;----------------
                                       LDI   R28, 12           ;wait 3 seconds (using R28)
                                 l2_2:   RCALL delay_seconds_2
                                       DEC   R28
                                       BRNE  l2_2
                                       RET
                                 ;================================================================
                                 delay_short_2:
                                       NOP
                                       NOP
                                       RET
                                 ;------------------------
                                 delay_us_2:
                                       LDI   R20, 90           ;allowed register
                                 l3_2:   RCALL delay_short_2
                                       DEC   R20
                                       BRNE  l3_2
                                       RET
                                 ;-----------------------
                                 delay_ms_2:
                                       LDI   R29, 40           ;using R29
                                 l4_2:   RCALL delay_us_2
                                       DEC   R29
                                       BRNE  l4_2
                                       RET
                                 ;================================================================
                                 delay_seconds_2:        
                                     LDI   R20, 255            ;outer loop (allowed)
                                 l5_2: LDI   R29, 255            ;mid loop (R29)
                                 l6_2: LDI   R30, 20             ;inner loop (R30)
                                 l7_2: DEC   R30         
                                     BRNE  l7_2          
                                     DEC   R29         
                                     BRNE  l6_2          
                                     DEC   R20         
                                     BRNE  l5_2          
                                     RET               
                                 ;----------------------------------------------------------------
                                 end_dis:
                                 nop
                                 .ENDMACRO
                                 
                                 
                                 
                                 ;=======================================================================
                                 ;*TEST**********************************
                                 ;=======================================================================
                                 
                                 start:
000000 e048                      	ldi r20, high(RAMEND)
000001 bf4e                      	out SPH, r20
000002 ef4f                      	ldi r20, low(RAMEND)
000003 bf4d                      	out SPL, r20
                                 
000004 e64e
000005 9340 0200
000007 e642
000008 9340 0201
00000a e641
00000b 9340 0202
00000d e648
00000e 9340 0203
000010 e543
000011 9340 0204
000013 e644
000014 9340 0205
000016 e745
000017 9340 0206
000019 e64f
00001a 9340 0207
00001c e64d
00001d 9340 0208
00001f e648
000020 9340 0209
000022 e641
000023 9340 020a
000025 e44d
000026 9340 020b                     SECRET_KEY 0x4D,0x61,0x68,0x6D,0x6F,0x75,0x64,0x53,0x68,0x61,0x62,0x6E
000028 9000 020b
00002a 9010 020a
00002c 9210 022a
00002e 9200 022b
000030 9000 0209
000032 9010 0208
000034 9210 0228
000036 9200 0229
000038 9000 0207
00003a 9010 0206
00003c 9210 0226
00003e 9200 0227
000040 9000 0205
000042 9010 0204
000044 9210 0224
000046 9200 0225
000048 9000 0203
00004a 9010 0202
00004c 9210 0222
00004e 9200 0223
000050 9000 0201
000052 9010 0200
000054 9210 0220
000056 9200 0221
000058 e1e0
000059 e0f2
00005a ee51
00005b eb67
00005c 9350 0210
00005e 9360 0211
000060 e357
000061 e96e
000062 e142
000063 5041
000064 9171
000065 9181
000066 0f75
000067 1f86
000068 8370
000069 8381
00006a 954a
00006b f7c1
00006c 2400
00006d 2411
00006e 2422
00006f 2433
000070 e1e0
000071 e0f2
000072 e2c0
000073 e0d2
000074 e346
000075 0c02
000076 1c13
000077 8170
000078 8181
000079 0e07
00007a 1e18
00007b e063
00007c 2366
00007d f039
00007e 2f96
00007f 1c00
000080 fa17
000081 1c11
000082 f800
000083 959a
000084 f7d1
000085 0000
000086 8200
000087 8211
000088 0c20
000089 1c31
00008a 2d62
00008b 706f
00008c 8178
00008d 8189
00008e 0e27
00008f 1e38
000090 2366
000091 f039
000092 2f96
000093 1c22
000094 fa37
000095 1c33
000096 f820
000097 959a
000098 f7d1
000099 0000
00009a 8228
00009b 8239
00009c d338
00009d d33e
00009e 954a
00009f f6a9                          RC5_SETUP
                                 
                                 	; Test case: "NDPR" as 0x4E44 and 0x5052
0000a0 e41e
0000a1 e404
0000a2 e530
0000a3 e522                      	INPUT 0x4E44, 0x5052
0000a4 ef9f
0000a5 b99a
0000a6 b994
0000a7 9828
0000a8 d04f
0000a9 d002
0000aa d034
0000ab c05b
0000ac e393
0000ad d00f
0000ae d049
0000af e392
0000b0 d00c
0000b1 d046
0000b2 e298
0000b3 d009
0000b4 d043
0000b5 e09c
0000b6 d006
0000b7 e091
0000b8 d004
0000b9 d03e
0000ba e096
0000bb d001
0000bc 9508
0000bd 2fe9
0000be 7fe0
0000bf b9eb
0000c0 9829
0000c1 9a28
0000c2 d02d
0000c3 9828
0000c4 d02e
0000c5 2fe9
0000c6 95e2
0000c7 7fe0
0000c8 b9eb
0000c9 9a28
0000ca d025
0000cb 9828
0000cc d026
0000cd 9508
0000ce 2fe9
0000cf 7fe0
0000d0 b9eb
0000d1 9a29
0000d2 9a28
0000d3 d01c
0000d4 9828
0000d5 d01d
0000d6 2fe9
0000d7 95e2
0000d8 7fe0
0000d9 b9eb
0000da 9a28
0000db d014
0000dc 9828
0000dd d015
0000de 9508
0000df 2f91
0000e0 dfed
0000e1 d01b
0000e2 2f90
0000e3 dfea
0000e4 d018
0000e5 2f93
0000e6 dfe7
0000e7 d015
0000e8 2f92
0000e9 dfe4
0000ea d012
0000eb e0cc
0000ec d010
0000ed 95ca
0000ee f7e9
0000ef 9508
0000f0 0000
0000f1 0000
0000f2 9508
0000f3 e54a
0000f4 dffb
0000f5 954a
0000f6 f7e9
0000f7 9508
0000f8 e2d8
0000f9 dff9
0000fa 95da
0000fb f7e9
0000fc 9508
0000fd ef4f
0000fe efdf
0000ff e1e4
000100 95ea
000101 f7f1
000102 95da
000103 f7d9
000104 954a
000105 f7c1
000106 9508
000107 0000                      	LCD
                                 
000108 e1a4
000109 e0b2
00010a 9160 0210
00010c 9150 0211
00010e 0f06
00010f 1f15
000110 9160 0212
000112 9150 0213
000114 0f26
000115 1f35
000116 e048
000117 e06f
000118 2362
000119 917d
00011a 918d
00011b 2702
00011c 2713
00011d 2366
00011e f039
00011f 2f96
000120 1f00
000121 fb17
000122 1f11
000123 f900
000124 959a
000125 f7d1
000126 0000
000127 0f07
000128 1f18
000129 e06f
00012a 2360
00012b 917d
00012c 918d
00012d 2720
00012e 2731
00012f 2366
000130 f039
000131 2f96
000132 1f22
000133 fb37
000134 1f33
000135 f920
000136 959a
000137 f7d1
000138 0000
000139 0f27
00013a 1f38
00013b 954a
00013c f6d1                      	RC5_ENCRYPT
00013d ef9f
00013e b99a
00013f b994
000140 9828
000141 d04f
000142 d002
000143 d034
000144 c05b
000145 e393
000146 d00f
000147 d049
000148 e392
000149 d00c
00014a d046
00014b e298
00014c d009
00014d d043
00014e e09c
00014f d006
000150 e091
000151 d004
000152 d03e
000153 e096
000154 d001
000155 9508
000156 2fe9
000157 7fe0
000158 b9eb
000159 9829
00015a 9a28
00015b d02d
00015c 9828
00015d d02e
00015e 2fe9
00015f 95e2
000160 7fe0
000161 b9eb
000162 9a28
000163 d025
000164 9828
000165 d026
000166 9508
000167 2fe9
000168 7fe0
000169 b9eb
00016a 9a29
00016b 9a28
00016c d01c
00016d 9828
00016e d01d
00016f 2fe9
000170 95e2
000171 7fe0
000172 b9eb
000173 9a28
000174 d014
000175 9828
000176 d015
000177 9508
000178 2f91
000179 dfed
00017a d01b
00017b 2f90
00017c dfea
00017d d018
00017e 2f93
00017f dfe7
000180 d015
000181 2f92
000182 dfe4
000183 d012
000184 e0cc
000185 d010
000186 95ca
000187 f7e9
000188 9508
000189 0000
00018a 0000
00018b 9508
00018c e54a
00018d dffb
00018e 954a
00018f f7e9
000190 9508
000191 e2d8
000192 dff9
000193 95da
000194 f7e9
000195 9508
000196 ef4f
000197 efdf
000198 e1e4
000199 95ea
00019a f7f1
00019b 95da
00019c f7d9
00019d 954a
00019e f7c1
00019f 9508
0001a0 0000                      	LCD
                                 
0001a1 e3a4
0001a2 e0b2
0001a3 e048
0001a4 e06f
0001a5 2360
0001a6 917e
0001a7 918e
0001a8 1b28
0001a9 0b37
0001aa 2366
0001ab f039
0001ac 2f96
0001ad 9537
0001ae fb20
0001af 9527
0001b0 f937
0001b1 959a
0001b2 f7d1
0001b3 0000
0001b4 2720
0001b5 2731
0001b6 e06f
0001b7 2362
0001b8 917e
0001b9 918e
0001ba 1b08
0001bb 0b17
0001bc 2366
0001bd f039
0001be 2f96
0001bf 9517
0001c0 fb00
0001c1 9507
0001c2 f917
0001c3 959a
0001c4 f7d1
0001c5 0000
0001c6 2702
0001c7 2713
0001c8 954a
0001c9 f6d1
0001ca 9160 0211
0001cc 9150 0210
0001ce 1b05
0001cf 0b16
0001d0 9160 0213
0001d2 9150 0212
0001d4 1b25
0001d5 0b36                      	RC5_DECRYPT
0001d6 ef9f
0001d7 b99a
0001d8 b994
0001d9 9828
0001da d04f
0001db d002
0001dc d034
0001dd c05b
0001de e393
0001df d00f
0001e0 d049
0001e1 e392
0001e2 d00c
0001e3 d046
0001e4 e298
0001e5 d009
0001e6 d043
0001e7 e09c
0001e8 d006
0001e9 e091
0001ea d004
0001eb d03e
0001ec e096
0001ed d001
0001ee 9508
0001ef 2fe9
0001f0 7fe0
0001f1 b9eb
0001f2 9829
0001f3 9a28
0001f4 d02d
0001f5 9828
0001f6 d02e
0001f7 2fe9
0001f8 95e2
0001f9 7fe0
0001fa b9eb
0001fb 9a28
0001fc d025
0001fd 9828
0001fe d026
0001ff 9508
000200 2fe9
000201 7fe0
000202 b9eb
000203 9a29
000204 9a28
000205 d01c
000206 9828
000207 d01d
000208 2fe9
000209 95e2
00020a 7fe0
00020b b9eb
00020c 9a28
00020d d014
00020e 9828
00020f d015
000210 9508
000211 2f91
000212 dfed
000213 d01b
000214 2f90
000215 dfea
000216 d018
000217 2f93
000218 dfe7
000219 d015
00021a 2f92
00021b dfe4
00021c d012
00021d e0cc
00021e d010
00021f 95ca
000220 f7e9
000221 9508
000222 0000
000223 0000
000224 9508
000225 e54a
000226 dffb
000227 954a
000228 f7e9
000229 9508
00022a e2d8
00022b dff9
00022c 95da
00022d f7e9
00022e 9508
00022f ef4f
000230 efdf
000231 e1e4
000232 95ea
000233 f7f1
000234 95da
000235 f7d9
000236 954a
000237 f7c1
000238 9508
000239 0000                      	LCD
                                 
                                 ; Test case: "MASS" as 0x4D41 and 0x5353
00023a e41d
00023b e401
00023c e533
00023d e523                      	INPUT 0x4D41, 0x5353
00023e ef9f
00023f b99a
000240 b994
000241 9828
000242 d04f
000243 d002
000244 d034
000245 c05b
000246 e393
000247 d00f
000248 d049
000249 e392
00024a d00c
00024b d046
00024c e298
00024d d009
00024e d043
00024f e09c
000250 d006
000251 e091
000252 d004
000253 d03e
000254 e096
000255 d001
000256 9508
000257 2fe9
000258 7fe0
000259 b9eb
00025a 9829
00025b 9a28
00025c d02d
00025d 9828
00025e d02e
00025f 2fe9
000260 95e2
000261 7fe0
000262 b9eb
000263 9a28
000264 d025
000265 9828
000266 d026
000267 9508
000268 2fe9
000269 7fe0
00026a b9eb
00026b 9a29
00026c 9a28
00026d d01c
00026e 9828
00026f d01d
000270 2fe9
000271 95e2
000272 7fe0
000273 b9eb
000274 9a28
000275 d014
000276 9828
000277 d015
000278 9508
000279 2f91
00027a dfed
00027b d01b
00027c 2f90
00027d dfea
00027e d018
00027f 2f93
000280 dfe7
000281 d015
000282 2f92
000283 dfe4
000284 d012
000285 e0cc
000286 d010
000287 95ca
000288 f7e9
000289 9508
00028a 0000
00028b 0000
00028c 9508
00028d e54a
00028e dffb
00028f 954a
000290 f7e9
000291 9508
000292 e2d8
000293 dff9
000294 95da
000295 f7e9
000296 9508
000297 ef4f
000298 efdf
000299 e1e4
00029a 95ea
00029b f7f1
00029c 95da
00029d f7d9
00029e 954a
00029f f7c1
0002a0 9508
0002a1 0000                      	LCD
                                 
0002a2 e1a4
0002a3 e0b2
0002a4 9160 0210
0002a6 9150 0211
0002a8 0f06
0002a9 1f15
0002aa 9160 0212
0002ac 9150 0213
0002ae 0f26
0002af 1f35
0002b0 e048
0002b1 e06f
0002b2 2362
0002b3 917d
0002b4 918d
0002b5 2702
0002b6 2713
0002b7 2366
0002b8 f039
0002b9 2f96
0002ba 1f00
0002bb fb17
0002bc 1f11
0002bd f900
0002be 959a
0002bf f7d1
0002c0 0000
0002c1 0f07
0002c2 1f18
0002c3 e06f
0002c4 2360
0002c5 917d
0002c6 918d
0002c7 2720
0002c8 2731
0002c9 2366
0002ca f039
0002cb 2f96
0002cc 1f22
0002cd fb37
0002ce 1f33
0002cf f920
0002d0 959a
0002d1 f7d1
0002d2 0000
0002d3 0f27
0002d4 1f38
0002d5 954a
0002d6 f6d1                      	RC5_ENCRYPT
0002d7 ef9f
0002d8 b99a
0002d9 b994
0002da 9828
0002db d04f
0002dc d002
0002dd d034
0002de c05b
0002df e393
0002e0 d00f
0002e1 d049
0002e2 e392
0002e3 d00c
0002e4 d046
0002e5 e298
0002e6 d009
0002e7 d043
0002e8 e09c
0002e9 d006
0002ea e091
0002eb d004
0002ec d03e
0002ed e096
0002ee d001
0002ef 9508
0002f0 2fe9
0002f1 7fe0
0002f2 b9eb
0002f3 9829
0002f4 9a28
0002f5 d02d
0002f6 9828
0002f7 d02e
0002f8 2fe9
0002f9 95e2
0002fa 7fe0
0002fb b9eb
0002fc 9a28
0002fd d025
0002fe 9828
0002ff d026
000300 9508
000301 2fe9
000302 7fe0
000303 b9eb
000304 9a29
000305 9a28
000306 d01c
000307 9828
000308 d01d
000309 2fe9
00030a 95e2
00030b 7fe0
00030c b9eb
00030d 9a28
00030e d014
00030f 9828
000310 d015
000311 9508
000312 2f91
000313 dfed
000314 d01b
000315 2f90
000316 dfea
000317 d018
000318 2f93
000319 dfe7
00031a d015
00031b 2f92
00031c dfe4
00031d d012
00031e e0cc
00031f d010
000320 95ca
000321 f7e9
000322 9508
000323 0000
000324 0000
000325 9508
000326 e54a
000327 dffb
000328 954a
000329 f7e9
00032a 9508
00032b e2d8
00032c dff9
00032d 95da
00032e f7e9
00032f 9508
000330 ef4f
000331 efdf
000332 e1e4
000333 95ea
000334 f7f1
000335 95da
000336 f7d9
000337 954a
000338 f7c1
000339 9508
00033a 0000                      	LCD
                                 
00033b e3a4
00033c e0b2
00033d e048
00033e e06f
00033f 2360
000340 917e
000341 918e
000342 1b28
000343 0b37
000344 2366
000345 f039
000346 2f96
000347 9537
000348 fb20
000349 9527
00034a f937
00034b 959a
00034c f7d1
00034d 0000
00034e 2720
00034f 2731
000350 e06f
000351 2362
000352 917e
000353 918e
000354 1b08
000355 0b17
000356 2366
000357 f039
000358 2f96
000359 9517
00035a fb00
00035b 9507
00035c f917
00035d 959a
00035e f7d1
00035f 0000
000360 2702
000361 2713
000362 954a
000363 f6d1
000364 9160 0211
000366 9150 0210
000368 1b05
000369 0b16
00036a 9160 0213
00036c 9150 0212
00036e 1b25
00036f 0b36                      	RC5_DECRYPT
000370 ef9f
000371 b99a
000372 b994
000373 9828
000374 d04f
000375 d002
000376 d034
000377 c05b
000378 e393
000379 d00f
00037a d049
00037b e392
00037c d00c
00037d d046
00037e e298
00037f d009
000380 d043
000381 e09c
000382 d006
000383 e091
000384 d004
000385 d03e
000386 e096
000387 d001
000388 9508
000389 2fe9
00038a 7fe0
00038b b9eb
00038c 9829
00038d 9a28
00038e d02d
00038f 9828
000390 d02e
000391 2fe9
000392 95e2
000393 7fe0
000394 b9eb
000395 9a28
000396 d025
000397 9828
000398 d026
000399 9508
00039a 2fe9
00039b 7fe0
00039c b9eb
00039d 9a29
00039e 9a28
00039f d01c
0003a0 9828
0003a1 d01d
0003a2 2fe9
0003a3 95e2
0003a4 7fe0
0003a5 b9eb
0003a6 9a28
0003a7 d014
0003a8 9828
0003a9 d015
0003aa 9508
0003ab 2f91
0003ac dfed
0003ad d01b
0003ae 2f90
0003af dfea
0003b0 d018
0003b1 2f93
0003b2 dfe7
0003b3 d015
0003b4 2f92
0003b5 dfe4
0003b6 d012
0003b7 e0cc
0003b8 d010
0003b9 95ca
0003ba f7e9
0003bb 9508
0003bc 0000
0003bd 0000
0003be 9508
0003bf e54a
0003c0 dffb
0003c1 954a
0003c2 f7e9
0003c3 9508
0003c4 e2d8
0003c5 dff9
0003c6 95da
0003c7 f7e9
0003c8 9508
0003c9 ef4f
0003ca efdf
0003cb e1e4
0003cc 95ea
0003cd f7f1
0003ce 95da
0003cf f7d9
0003d0 954a
0003d1 f7c1
0003d2 9508
0003d3 0000                      	LCD
                                 
                                 end_f: 
0003d4 cfff                      	 RJMP  end_f
                                 
                                 	 I_RESET:
0003d5 95e3                              inc ZL
0003d6 95e3                              inc ZL
0003d7 e354                              ldi R21, 0x34
0003d8 13e5                              cpse ZL, R21
0003d9 9508                              ret    
0003da e1e0                              ldi ZL, low(S0L)
0003db 9508                              ret
                                 
                                 
                                 J_RESET:
0003dc 95c3                              inc YL
0003dd 95c3                              inc YL
0003de e05c                              ldi R21, 0x0C
0003df 13c5                              cpse YL, R21
0003e0 9508                              ret
0003e1 e2c0                              LDI YL, low(0x0220)   ; reset Y pointer to start of L-array


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :  16 y  :   4 z  :   8 r0 :  19 r1 :  19 r2 :   8 r3 :   7 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  36 r17:  32 r18:  36 r19:  32 r20:  65 
r21:  24 r22:  59 r23:  23 r24:  23 r25: 122 r26:   4 r27:   4 r28:  17 
r29:  25 r30: 102 r31:   2 
Registers used: 23 out of 35 (65.7%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  13 add   :  13 adiw  :   0 and   :   8 
andi  :  25 asr   :   0 bclr  :   0 bld   :  10 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  10 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 brlt  :   0 brmi  :   0 
brne  :  52 brpl  :   0 brsh  :   0 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :  10 call  :   0 cbi   :  36 cbr   :   0 
clc   :   0 clh   :   0 cli   :   0 cln   :   0 clr   :   4 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   0 cpc   :   0 
cpi   :   0 cpse  :   2 dec   :  52 eor   :  16 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   0 inc   :   4 jmp   :   0 
ld    :  20 ldd   :   2 ldi   : 137 lds   :  28 lpm   :   0 lsl   :   0 
lsr   :   0 mov   :  59 movw  :   0 mul   :   0 muls  :   0 mulsu :   0 
neg   :   0 nop   :  28 or    :   0 ori   :   0 out   :  38 pop   :   0 
push  :   0 rcall : 194 ret   :  52 reti  :   0 rjmp  :   7 rol   :  12 
ror   :   8 sbc   :   8 sbci  :   0 sbi   :  30 sbic  :   0 sbis  :   0 
sbiw  :   0 sbr   :   0 sbrc  :   0 sbrs  :   0 sec   :   0 seh   :   0 
sei   :   0 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :   3 std   :   3 sts   :  26 
sub   :   8 subi  :   1 swap  :  12 tst   :  10 wdr   :   0 
Instructions used: 35 out of 113 (31.0%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007c6   1990      0   1990   32768   6.1%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 8 warnings
